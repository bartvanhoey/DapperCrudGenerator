using Dapper;
using Microsoft.Data.SqlClient;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading.Tasks;
using @@NameSpace.Models;

namespace @@NameSpace.Services
{
    public class @@ClassNameService : I@@ClassNameService
    {
        // Database connection
        private readonly SqlConnectionConfiguration _configuration;
        public @@ClassNameService(SqlConnectionConfiguration configuration)
        {
            _configuration = configuration;
        }
        // Add (create) a @@ClassName table row (SQL Insert)
        // This only works if you're already created the stored procedure.
        public async Task<bool> @@ClassNameInsert(@@ClassName @@ObjectName)
        {
            using (var conn = new SqlConnection(_configuration.Value))
            {
                var parameters = new DynamicParameters();
			@@ParametersAdd
                // Stored procedure method
                await conn.ExecuteAsync("sp@@ClassName_Insert", parameters, commandType: CommandType.StoredProcedure);
            }
            return true;
        }     
        // Get a list of @@ObjectName rows (SQL Select)
        // This only works if you're already created the stored procedure.
        public async Task<IEnumerable<@@ClassName>> @@ClassNameList()
        {
            IEnumerable<@@ClassName> @@ObjectList;
            using (var conn = new SqlConnection(_configuration.Value))
            {
                @@ObjectList = await conn.QueryAsync<@@ClassName>("sp@@ClassName_List", commandType: CommandType.StoredProcedure);
            }
            return @@ObjectList;
        }
      	//Search for data (very generic...you may need to adjust.
        public async Task<IEnumerable<@@ClassName>> @@ClassNameSearch(string @Param)
        {
            var parameters = new DynamicParameters();
            parameters.Add("@Param", Param, DbType.String);
            IEnumerable<@@ClassName> @@ObjectList;
            using (var conn = new SqlConnection(_configuration.Value))
            {
                @@ObjectList = await conn.QueryAsync<@@ClassName>("sp@@ClassName_Search", parameters, commandType: CommandType.StoredProcedure);
            }
            return @@ObjectList;
        }
        // Search based on date range. Code generator makes wild guess, you 
        // will likely need to adjust field names
        public async Task<IEnumerable<@@ClassName>> @@ClassNameDateRange(DateTime @StartDate, DateTime @EndDate)
        {
            var parameters = new DynamicParameters();
            parameters.Add("@StartDate", StartDate, DbType.Date);
            parameters.Add("@EndDate", EndDate, DbType.Date);
            IEnumerable<@@ClassName>  @@ObjectList;
            using (var conn = new SqlConnection(_configuration.Value))
            {
                @@ObjectList = await conn.QueryAsync<@@ClassName>("sp@@ClassName_DateRange", parameters, commandType: CommandType.StoredProcedure);
            }
            return @@ObjectList;
        }

        // Get one @@ObjectName based on its @@ClassNameID (SQL Select)
        // This only works if you're already created the stored procedure.
        public async Task<@@ClassName> @@ClassName_GetOne(int @@@PrimaryKey)
        {
            @@ClassName @@ObjectName = new @@ClassName();
            var parameters = new DynamicParameters();
            parameters.Add("@@@PrimaryKey", @@PrimaryKey, DbType.Int32);
            using (var conn = new SqlConnection(_configuration.Value))
            {
                @@ObjectName = await conn.QueryFirstOrDefaultAsync<@@ClassName>("sp@@ClassName_GetOne",parameters,commandType: CommandType.StoredProcedure);
            }
            return @@ObjectName;
        }
        // Update one @@ClassName row based on its @@ClassNameID (SQL Update)
        // This only works if you're already created the stored procedure.
        public async Task<bool> @@ClassNameUpdate(@@ClassName @@ObjectName)
        {
            using (var conn = new SqlConnection(_configuration.Value))
            {
                var parameters = new DynamicParameters();
                @@ParameterAddUpdateOnly
			    @@ParametersAdd
                await conn.ExecuteAsync("sp@@ClassName_Update", parameters, commandType: CommandType.StoredProcedure);
            }
            return true;
        }

        // Physically delete one @@ClassName row based on its @@ClassNameID (SQL Delete)
        // This only works if you're already created the stored procedure.
        public async Task<bool> @@ClassNameDelete(int @@PrimaryKey)
        {
            var parameters = new DynamicParameters();
            parameters.Add("@@@PrimaryKey", @@PrimaryKey, DbType.Int32);
            using (var conn = new SqlConnection(_configuration.Value))
            {
                await conn.ExecuteAsync("sp@@ClassName_Delete",parameters, commandType: CommandType.StoredProcedure);
            }
            return true;
        }
        
        public async Task<IEnumerable<@@ClassName>> @@ClassName_GetDropdown(int @IncludeNumber)
            {
                var parameters = new DynamicParameters();
                parameters.Add("@IncludeNumber", IncludeNumber, DbType.Int32);
        
                IEnumerable<@@ClassName> @@ObjectList;
                using (var conn = new SqlConnection(_configuration.Value))
                    {
                        @@ObjectList = await conn.QueryAsync<@@ClassName>("sp@@ClassName_GetDropdown", parameters, commandType: CommandType.StoredProcedure);
                    }
                return @@ObjectList;
            }
        

    }
}
